{"ast":null,"code":"var assert = require('./assert');\n\nvar isString = require('./isString');\n\nvar isFunction = require('./isFunction');\n\nvar forbidNewOperator = require('./forbidNewOperator');\n\nmodule.exports = function irreducible(name, predicate) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isString(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to irreducible(name, predicate) (expected a string)';\n    });\n    assert(isFunction(predicate), 'Invalid argument predicate ' + assert.stringify(predicate) + ' supplied to irreducible(name, predicate) (expected a function)');\n  }\n\n  function Irreducible(value, path) {\n    if (process.env.NODE_ENV !== 'production') {\n      forbidNewOperator(this, Irreducible);\n      path = path || [name];\n      assert(predicate(value), function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');\n      });\n    }\n\n    return value;\n  }\n\n  Irreducible.meta = {\n    kind: 'irreducible',\n    name: name,\n    predicate: predicate,\n    identity: true\n  };\n  Irreducible.displayName = name;\n  Irreducible.is = predicate;\n  return Irreducible;\n};","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/node_modules/tcomb/lib/irreducible.js"],"names":["assert","require","isString","isFunction","forbidNewOperator","module","exports","irreducible","name","predicate","process","env","NODE_ENV","stringify","Irreducible","value","path","join","meta","kind","identity","displayName","is"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,qBAAD,CAA/B;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,SAA3B,EAAsC;AAErD,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCZ,IAAAA,MAAM,CAACE,QAAQ,CAACM,IAAD,CAAT,EAAiB,YAAY;AAAE,aAAO,2BAA2BR,MAAM,CAACa,SAAP,CAAiBL,IAAjB,CAA3B,GAAoD,+DAA3D;AAA6H,KAA5J,CAAN;AACAR,IAAAA,MAAM,CAACG,UAAU,CAACM,SAAD,CAAX,EAAwB,gCAAgCT,MAAM,CAACa,SAAP,CAAiBJ,SAAjB,CAAhC,GAA8D,iEAAtF,CAAN;AACD;;AAED,WAASK,WAAT,CAAqBC,KAArB,EAA4BC,IAA5B,EAAkC;AAEhC,QAAIN,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCR,MAAAA,iBAAiB,CAAC,IAAD,EAAOU,WAAP,CAAjB;AACAE,MAAAA,IAAI,GAAGA,IAAI,IAAI,CAACR,IAAD,CAAf;AACAR,MAAAA,MAAM,CAACS,SAAS,CAACM,KAAD,CAAV,EAAmB,YAAY;AAAE,eAAO,mBAAmBf,MAAM,CAACa,SAAP,CAAiBE,KAAjB,CAAnB,GAA6C,eAA7C,GAA+DC,IAAI,CAACC,IAAL,CAAU,GAAV,CAAtE;AAAuF,OAAxH,CAAN;AACD;;AAED,WAAOF,KAAP;AACD;;AAEDD,EAAAA,WAAW,CAACI,IAAZ,GAAmB;AACjBC,IAAAA,IAAI,EAAE,aADW;AAEjBX,IAAAA,IAAI,EAAEA,IAFW;AAGjBC,IAAAA,SAAS,EAAEA,SAHM;AAIjBW,IAAAA,QAAQ,EAAE;AAJO,GAAnB;AAOAN,EAAAA,WAAW,CAACO,WAAZ,GAA0Bb,IAA1B;AAEAM,EAAAA,WAAW,CAACQ,EAAZ,GAAiBb,SAAjB;AAEA,SAAOK,WAAP;AACD,CA9BD","sourcesContent":["var assert = require('./assert');\nvar isString = require('./isString');\nvar isFunction = require('./isFunction');\nvar forbidNewOperator = require('./forbidNewOperator');\n\nmodule.exports = function irreducible(name, predicate) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isString(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to irreducible(name, predicate) (expected a string)'; });\n    assert(isFunction(predicate), 'Invalid argument predicate ' + assert.stringify(predicate) + ' supplied to irreducible(name, predicate) (expected a function)');\n  }\n\n  function Irreducible(value, path) {\n\n    if (process.env.NODE_ENV !== 'production') {\n      forbidNewOperator(this, Irreducible);\n      path = path || [name];\n      assert(predicate(value), function () { return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/'); });\n    }\n\n    return value;\n  }\n\n  Irreducible.meta = {\n    kind: 'irreducible',\n    name: name,\n    predicate: predicate,\n    identity: true\n  };\n\n  Irreducible.displayName = name;\n\n  Irreducible.is = predicate;\n\n  return Irreducible;\n};\n"]},"metadata":{},"sourceType":"script"}
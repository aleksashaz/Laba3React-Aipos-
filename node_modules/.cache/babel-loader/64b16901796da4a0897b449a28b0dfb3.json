{"ast":null,"code":"var assert = require('./assert');\n\nvar isTypeName = require('./isTypeName');\n\nvar String = require('./String');\n\nvar Function = require('./Function');\n\nvar isBoolean = require('./isBoolean');\n\nvar isObject = require('./isObject');\n\nvar isNil = require('./isNil');\n\nvar create = require('./create');\n\nvar getTypeName = require('./getTypeName');\n\nvar dict = require('./dict');\n\nvar getDefaultInterfaceName = require('./getDefaultInterfaceName');\n\nvar extend = require('./extend');\n\nfunction getDefaultName(props) {\n  return 'Struct' + getDefaultInterfaceName(props);\n}\n\nfunction extendStruct(mixins, name) {\n  return extend(struct, mixins, name);\n}\n\nfunction getOptions(options) {\n  if (!isObject(options)) {\n    options = isNil(options) ? {} : {\n      name: options\n    };\n  }\n\n  if (!options.hasOwnProperty('strict')) {\n    options.strict = struct.strict;\n  }\n\n  if (!options.hasOwnProperty('defaultProps')) {\n    options.defaultProps = {};\n  }\n\n  return options;\n}\n\nfunction struct(props, options) {\n  options = getOptions(options);\n  var name = options.name;\n  var strict = options.strict;\n  var defaultProps = options.defaultProps;\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(dict(String, Function).is(props), function () {\n      return 'Invalid argument props ' + assert.stringify(props) + ' supplied to struct(props, [options]) combinator (expected a dictionary String -> Type)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to struct(props, [options]) combinator (expected a string)';\n    });\n    assert(isBoolean(strict), function () {\n      return 'Invalid argument strict ' + assert.stringify(strict) + ' supplied to struct(props, [options]) combinator (expected a boolean)';\n    });\n    assert(isObject(defaultProps), function () {\n      return 'Invalid argument defaultProps ' + assert.stringify(defaultProps) + ' supplied to struct(props, [options]) combinator (expected an object)';\n    });\n  }\n\n  var displayName = name || getDefaultName(props);\n\n  function Struct(value, path) {\n    if (Struct.is(value)) {\n      // implements idempotency\n      return value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isObject(value), function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an object)';\n      }); // strictness\n\n      if (strict) {\n        for (k in value) {\n          if (value.hasOwnProperty(k)) {\n            assert(props.hasOwnProperty(k), function () {\n              return 'Invalid additional prop \"' + k + '\" supplied to ' + path.join('/');\n            });\n          }\n        }\n      }\n    }\n\n    if (!(this instanceof Struct)) {\n      // `new` is optional\n      return new Struct(value, path);\n    }\n\n    for (var k in props) {\n      if (props.hasOwnProperty(k)) {\n        var expected = props[k];\n        var actual = value[k]; // apply defaults\n\n        if (actual === undefined) {\n          actual = defaultProps[k];\n        }\n\n        this[k] = create(expected, actual, process.env.NODE_ENV !== 'production' ? path.concat(k + ': ' + getTypeName(expected)) : null);\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(this);\n    }\n  }\n\n  Struct.meta = {\n    kind: 'struct',\n    props: props,\n    name: name,\n    identity: false,\n    strict: strict,\n    defaultProps: defaultProps\n  };\n  Struct.displayName = displayName;\n\n  Struct.is = function (x) {\n    return x instanceof Struct;\n  };\n\n  Struct.update = function (instance, patch) {\n    return new Struct(assert.update(instance, patch));\n  };\n\n  Struct.extend = function (xs, name) {\n    return extendStruct([Struct].concat(xs), name);\n  };\n\n  return Struct;\n}\n\nstruct.strict = false;\nstruct.getOptions = getOptions;\nstruct.getDefaultName = getDefaultName;\nstruct.extend = extendStruct;\nmodule.exports = struct;","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/node_modules/tcomb/lib/struct.js"],"names":["assert","require","isTypeName","String","Function","isBoolean","isObject","isNil","create","getTypeName","dict","getDefaultInterfaceName","extend","getDefaultName","props","extendStruct","mixins","name","struct","getOptions","options","hasOwnProperty","strict","defaultProps","process","env","NODE_ENV","is","stringify","displayName","Struct","value","path","join","k","expected","actual","undefined","concat","Object","freeze","meta","kind","identity","x","update","instance","patch","xs","module","exports"],"mappings":"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","sourcesContent":["var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar String = require('./String');\nvar Function = require('./Function');\nvar isBoolean = require('./isBoolean');\nvar isObject = require('./isObject');\nvar isNil = require('./isNil');\nvar create = require('./create');\nvar getTypeName = require('./getTypeName');\nvar dict = require('./dict');\nvar getDefaultInterfaceName = require('./getDefaultInterfaceName');\nvar extend = require('./extend');\n\nfunction getDefaultName(props) {\n  return 'Struct' + getDefaultInterfaceName(props);\n}\n\nfunction extendStruct(mixins, name) {\n  return extend(struct, mixins, name);\n}\n\nfunction getOptions(options) {\n  if (!isObject(options)) {\n    options = isNil(options) ? {} : { name: options };\n  }\n  if (!options.hasOwnProperty('strict')) {\n    options.strict = struct.strict;\n  }\n  if (!options.hasOwnProperty('defaultProps')) {\n    options.defaultProps = {};\n  }\n  return options;\n}\n\nfunction struct(props, options) {\n\n  options = getOptions(options);\n  var name = options.name;\n  var strict = options.strict;\n  var defaultProps = options.defaultProps;\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(dict(String, Function).is(props), function () { return 'Invalid argument props ' + assert.stringify(props) + ' supplied to struct(props, [options]) combinator (expected a dictionary String -> Type)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to struct(props, [options]) combinator (expected a string)'; });\n    assert(isBoolean(strict), function () { return 'Invalid argument strict ' + assert.stringify(strict) + ' supplied to struct(props, [options]) combinator (expected a boolean)'; });\n    assert(isObject(defaultProps), function () { return 'Invalid argument defaultProps ' + assert.stringify(defaultProps) + ' supplied to struct(props, [options]) combinator (expected an object)'; });\n  }\n\n  var displayName = name || getDefaultName(props);\n\n  function Struct(value, path) {\n\n    if (Struct.is(value)) { // implements idempotency\n      return value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isObject(value), function () { return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an object)'; });\n      // strictness\n      if (strict) {\n        for (k in value) {\n          if (value.hasOwnProperty(k)) {\n            assert(props.hasOwnProperty(k), function () { return 'Invalid additional prop \"' + k + '\" supplied to ' + path.join('/'); });\n          }\n        }\n      }\n    }\n\n    if (!(this instanceof Struct)) { // `new` is optional\n      return new Struct(value, path);\n    }\n\n    for (var k in props) {\n      if (props.hasOwnProperty(k)) {\n        var expected = props[k];\n        var actual = value[k];\n        // apply defaults\n        if (actual === undefined) {\n          actual = defaultProps[k];\n        }\n        this[k] = create(expected, actual, ( process.env.NODE_ENV !== 'production' ? path.concat(k + ': ' + getTypeName(expected)) : null ));\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(this);\n    }\n\n  }\n\n  Struct.meta = {\n    kind: 'struct',\n    props: props,\n    name: name,\n    identity: false,\n    strict: strict,\n    defaultProps: defaultProps\n  };\n\n  Struct.displayName = displayName;\n\n  Struct.is = function (x) {\n    return x instanceof Struct;\n  };\n\n  Struct.update = function (instance, patch) {\n    return new Struct(assert.update(instance, patch));\n  };\n\n  Struct.extend = function (xs, name) {\n    return extendStruct([Struct].concat(xs), name);\n  };\n\n  return Struct;\n}\n\nstruct.strict = false;\nstruct.getOptions = getOptions;\nstruct.getDefaultName = getDefaultName;\nstruct.extend = extendStruct;\nmodule.exports = struct;\n"]},"metadata":{},"sourceType":"script"}
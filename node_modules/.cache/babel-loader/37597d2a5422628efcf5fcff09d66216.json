{"ast":null,"code":"var assert = require('./assert');\n\nvar isTypeName = require('./isTypeName');\n\nvar isFunction = require('./isFunction');\n\nvar forbidNewOperator = require('./forbidNewOperator');\n\nvar isIdentity = require('./isIdentity');\n\nvar create = require('./create');\n\nvar is = require('./is');\n\nvar getTypeName = require('./getTypeName');\n\nvar getFunctionName = require('./getFunctionName');\n\nfunction getDefaultName(type, predicate) {\n  return '{' + getTypeName(type) + ' | ' + getFunctionName(predicate) + '}';\n}\n\nfunction refinement(type, predicate, name) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(type), function () {\n      return 'Invalid argument type ' + assert.stringify(type) + ' supplied to refinement(type, predicate, [name]) combinator (expected a type)';\n    });\n    assert(isFunction(predicate), function () {\n      return 'Invalid argument predicate supplied to refinement(type, predicate, [name]) combinator (expected a function)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to refinement(type, predicate, [name]) combinator (expected a string)';\n    });\n  }\n\n  var displayName = name || getDefaultName(type, predicate);\n  var identity = isIdentity(type);\n\n  function Refinement(value, path) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (identity) {\n        forbidNewOperator(this, Refinement);\n      }\n\n      path = path || [displayName];\n    }\n\n    var x = create(type, value, path);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(predicate(x), function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');\n      });\n    }\n\n    return x;\n  }\n\n  Refinement.meta = {\n    kind: 'subtype',\n    type: type,\n    predicate: predicate,\n    name: name,\n    identity: identity\n  };\n  Refinement.displayName = displayName;\n\n  Refinement.is = function (x) {\n    return is(x, type) && predicate(x);\n  };\n\n  Refinement.update = function (instance, patch) {\n    return Refinement(assert.update(instance, patch));\n  };\n\n  return Refinement;\n}\n\nrefinement.getDefaultName = getDefaultName;\nmodule.exports = refinement;","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/node_modules/tcomb/lib/refinement.js"],"names":["assert","require","isTypeName","isFunction","forbidNewOperator","isIdentity","create","is","getTypeName","getFunctionName","getDefaultName","type","predicate","refinement","name","process","env","NODE_ENV","stringify","displayName","identity","Refinement","value","path","x","join","meta","kind","update","instance","patch","module","exports"],"mappings":"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","sourcesContent":["var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar forbidNewOperator = require('./forbidNewOperator');\nvar isIdentity = require('./isIdentity');\nvar create = require('./create');\nvar is = require('./is');\nvar getTypeName = require('./getTypeName');\nvar getFunctionName = require('./getFunctionName');\n\nfunction getDefaultName(type, predicate) {\n  return '{' + getTypeName(type) + ' | ' + getFunctionName(predicate) + '}';\n}\n\nfunction refinement(type, predicate, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(type), function () { return 'Invalid argument type ' + assert.stringify(type) + ' supplied to refinement(type, predicate, [name]) combinator (expected a type)'; });\n    assert(isFunction(predicate), function () { return 'Invalid argument predicate supplied to refinement(type, predicate, [name]) combinator (expected a function)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to refinement(type, predicate, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || getDefaultName(type, predicate);\n  var identity = isIdentity(type);\n\n  function Refinement(value, path) {\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (identity) {\n        forbidNewOperator(this, Refinement);\n      }\n      path = path || [displayName];\n    }\n\n    var x = create(type, value, path);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(predicate(x), function () { return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/'); });\n    }\n\n    return x;\n  }\n\n  Refinement.meta = {\n    kind: 'subtype',\n    type: type,\n    predicate: predicate,\n    name: name,\n    identity: identity\n  };\n\n  Refinement.displayName = displayName;\n\n  Refinement.is = function (x) {\n    return is(x, type) && predicate(x);\n  };\n\n  Refinement.update = function (instance, patch) {\n    return Refinement(assert.update(instance, patch));\n  };\n\n  return Refinement;\n}\n\nrefinement.getDefaultName = getDefaultName;\nmodule.exports = refinement;\n"]},"metadata":{},"sourceType":"script"}
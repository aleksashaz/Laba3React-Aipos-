{"ast":null,"code":"var assert = require('./assert');\n\nvar isTypeName = require('./isTypeName');\n\nvar isFunction = require('./isFunction');\n\nvar getTypeName = require('./getTypeName');\n\nvar isIdentity = require('./isIdentity');\n\nvar isArray = require('./isArray');\n\nvar create = require('./create');\n\nvar is = require('./is');\n\nfunction getDefaultName(types) {\n  return '[' + types.map(getTypeName).join(', ') + ']';\n}\n\nfunction tuple(types, name) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(types) && types.every(isFunction), function () {\n      return 'Invalid argument types ' + assert.stringify(types) + ' supplied to tuple(types, [name]) combinator (expected an array of types)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to tuple(types, [name]) combinator (expected a string)';\n    });\n  }\n\n  var displayName = name || getDefaultName(types);\n  var identity = types.every(isIdentity);\n\n  function Tuple(value, path) {\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value;\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isArray(value) && value.length === types.length, function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an array of length ' + types.length + ')';\n      });\n    }\n\n    var idempotent = true;\n    var ret = [];\n\n    for (var i = 0, len = types.length; i < len; i++) {\n      var expected = types[i];\n      var actual = value[i];\n      var instance = create(expected, actual, process.env.NODE_ENV !== 'production' ? path.concat(i + ': ' + getTypeName(expected)) : null);\n      idempotent = idempotent && actual === instance;\n      ret.push(instance);\n    }\n\n    if (idempotent) {\n      // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n  }\n\n  Tuple.meta = {\n    kind: 'tuple',\n    types: types,\n    name: name,\n    identity: identity\n  };\n  Tuple.displayName = displayName;\n\n  Tuple.is = function (x) {\n    return isArray(x) && x.length === types.length && types.every(function (type, i) {\n      return is(x[i], type);\n    });\n  };\n\n  Tuple.update = function (instance, patch) {\n    return Tuple(assert.update(instance, patch));\n  };\n\n  return Tuple;\n}\n\ntuple.getDefaultName = getDefaultName;\nmodule.exports = tuple;","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/node_modules/tcomb/lib/tuple.js"],"names":["assert","require","isTypeName","isFunction","getTypeName","isIdentity","isArray","create","is","getDefaultName","types","map","join","tuple","name","process","env","NODE_ENV","every","stringify","displayName","identity","Tuple","value","path","length","idempotent","ret","i","len","expected","actual","instance","concat","push","Object","freeze","meta","kind","x","type","update","patch","module","exports"],"mappings":"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","sourcesContent":["var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar getTypeName = require('./getTypeName');\nvar isIdentity = require('./isIdentity');\nvar isArray = require('./isArray');\nvar create = require('./create');\nvar is = require('./is');\n\nfunction getDefaultName(types) {\n  return '[' + types.map(getTypeName).join(', ') + ']';\n}\n\nfunction tuple(types, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(types) && types.every(isFunction), function () { return 'Invalid argument types ' + assert.stringify(types) + ' supplied to tuple(types, [name]) combinator (expected an array of types)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to tuple(types, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || getDefaultName(types);\n  var identity = types.every(isIdentity);\n\n  function Tuple(value, path) {\n\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value;\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isArray(value) && value.length === types.length, function () { return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an array of length ' + types.length + ')'; });\n    }\n\n    var idempotent = true;\n    var ret = [];\n    for (var i = 0, len = types.length; i < len; i++) {\n      var expected = types[i];\n      var actual = value[i];\n      var instance = create(expected, actual, ( process.env.NODE_ENV !== 'production' ? path.concat(i + ': ' + getTypeName(expected)) : null ));\n      idempotent = idempotent && ( actual === instance );\n      ret.push(instance);\n    }\n\n    if (idempotent) { // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n  }\n\n  Tuple.meta = {\n    kind: 'tuple',\n    types: types,\n    name: name,\n    identity: identity\n  };\n\n  Tuple.displayName = displayName;\n\n  Tuple.is = function (x) {\n    return isArray(x) &&\n      x.length === types.length &&\n      types.every(function (type, i) {\n        return is(x[i], type);\n      });\n  };\n\n  Tuple.update = function (instance, patch) {\n    return Tuple(assert.update(instance, patch));\n  };\n\n  return Tuple;\n}\n\ntuple.getDefaultName = getDefaultName;\nmodule.exports = tuple;"]},"metadata":{},"sourceType":"script"}
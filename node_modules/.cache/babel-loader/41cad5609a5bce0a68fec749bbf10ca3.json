{"ast":null,"code":"var assert = require('./assert');\n\nvar isFunction = require('./isFunction');\n\nvar isType = require('./isType');\n\nvar Any = require('./Any');\n\nmodule.exports = function match(x) {\n  var type, guard, f, count;\n\n  for (var i = 1, len = arguments.length; i < len;) {\n    type = arguments[i];\n    guard = arguments[i + 1];\n    f = arguments[i + 2];\n\n    if (isFunction(f) && !isType(f)) {\n      i = i + 3;\n    } else {\n      f = guard;\n      guard = Any.is;\n      i = i + 2;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      count = (count || 0) + 1;\n      assert(isType(type), function () {\n        return 'Invalid type in clause #' + count;\n      });\n      assert(isFunction(guard), function () {\n        return 'Invalid guard in clause #' + count;\n      });\n      assert(isFunction(f), function () {\n        return 'Invalid block in clause #' + count;\n      });\n    }\n\n    if (type.is(x) && guard(x)) {\n      return f(x);\n    }\n  }\n\n  assert.fail('Match error');\n};","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/node_modules/tcomb/lib/match.js"],"names":["assert","require","isFunction","isType","Any","module","exports","match","x","type","guard","f","count","i","len","arguments","length","is","process","env","NODE_ENV","fail"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIG,GAAG,GAAGH,OAAO,CAAC,OAAD,CAAjB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeC,CAAf,EAAkB;AACjC,MAAIC,IAAJ,EAAUC,KAAV,EAAiBC,CAAjB,EAAoBC,KAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGC,SAAS,CAACC,MAAhC,EAAwCH,CAAC,GAAGC,GAA5C,GAAmD;AACjDL,IAAAA,IAAI,GAAGM,SAAS,CAACF,CAAD,CAAhB;AACAH,IAAAA,KAAK,GAAGK,SAAS,CAACF,CAAC,GAAG,CAAL,CAAjB;AACAF,IAAAA,CAAC,GAAGI,SAAS,CAACF,CAAC,GAAG,CAAL,CAAb;;AAEA,QAAIX,UAAU,CAACS,CAAD,CAAV,IAAiB,CAACR,MAAM,CAACQ,CAAD,CAA5B,EAAiC;AAC/BE,MAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACD,KAFD,MAGK;AACHF,MAAAA,CAAC,GAAGD,KAAJ;AACAA,MAAAA,KAAK,GAAGN,GAAG,CAACa,EAAZ;AACAJ,MAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACD;;AAED,QAAIK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCR,MAAAA,KAAK,GAAG,CAACA,KAAK,IAAI,CAAV,IAAe,CAAvB;AACAZ,MAAAA,MAAM,CAACG,MAAM,CAACM,IAAD,CAAP,EAAe,YAAY;AAAE,eAAO,6BAA6BG,KAApC;AAA4C,OAAzE,CAAN;AACAZ,MAAAA,MAAM,CAACE,UAAU,CAACQ,KAAD,CAAX,EAAoB,YAAY;AAAE,eAAO,8BAA8BE,KAArC;AAA6C,OAA/E,CAAN;AACAZ,MAAAA,MAAM,CAACE,UAAU,CAACS,CAAD,CAAX,EAAgB,YAAY;AAAE,eAAO,8BAA8BC,KAArC;AAA6C,OAA3E,CAAN;AACD;;AAED,QAAIH,IAAI,CAACQ,EAAL,CAAQT,CAAR,KAAcE,KAAK,CAACF,CAAD,CAAvB,EAA4B;AAC1B,aAAOG,CAAC,CAACH,CAAD,CAAR;AACD;AACF;;AACDR,EAAAA,MAAM,CAACqB,IAAP,CAAY,aAAZ;AACD,CA5BD","sourcesContent":["var assert = require('./assert');\nvar isFunction = require('./isFunction');\nvar isType = require('./isType');\nvar Any = require('./Any');\n\nmodule.exports = function match(x) {\n  var type, guard, f, count;\n  for (var i = 1, len = arguments.length; i < len; ) {\n    type = arguments[i];\n    guard = arguments[i + 1];\n    f = arguments[i + 2];\n\n    if (isFunction(f) && !isType(f)) {\n      i = i + 3;\n    }\n    else {\n      f = guard;\n      guard = Any.is;\n      i = i + 2;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      count = (count || 0) + 1;\n      assert(isType(type), function () { return 'Invalid type in clause #' + count; });\n      assert(isFunction(guard), function () { return 'Invalid guard in clause #' + count; });\n      assert(isFunction(f), function () { return 'Invalid block in clause #' + count; });\n    }\n\n    if (type.is(x) && guard(x)) {\n      return f(x);\n    }\n  }\n  assert.fail('Match error');\n};\n"]},"metadata":{},"sourceType":"script"}
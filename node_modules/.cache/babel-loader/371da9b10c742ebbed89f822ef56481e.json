{"ast":null,"code":"var assert = require('./assert');\n\nvar isFunction = require('./isFunction');\n\nvar isArray = require('./isArray');\n\nvar mixin = require('./mixin');\n\nvar isStruct = require('./isStruct');\n\nvar isInterface = require('./isInterface');\n\nvar isObject = require('./isObject');\n\nvar refinement = require('./refinement');\n\nvar decompose = require('./decompose');\n\nfunction compose(predicates, unrefinedType, name) {\n  var result = predicates.reduce(function (type, predicate) {\n    return refinement(type, predicate);\n  }, unrefinedType);\n\n  if (name) {\n    result.displayName = name;\n    result.meta.name = name;\n  }\n\n  return result;\n}\n\nfunction getProps(type) {\n  return isObject(type) ? type : type.meta.props;\n}\n\nfunction getDefaultProps(type) {\n  return isObject(type) ? null : type.meta.defaultProps;\n}\n\nfunction pushAll(arr, elements) {\n  Array.prototype.push.apply(arr, elements);\n}\n\nfunction extend(combinator, mixins, options) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(combinator), function () {\n      return 'Invalid argument combinator supplied to extend(combinator, mixins, options), expected a function';\n    });\n    assert(isArray(mixins), function () {\n      return 'Invalid argument mixins supplied to extend(combinator, mixins, options), expected an array';\n    });\n  }\n\n  var props = {};\n  var prototype = {};\n  var predicates = [];\n  var defaultProps = {};\n  mixins.forEach(function (x, i) {\n    var decomposition = decompose(x);\n    var unrefinedType = decomposition.unrefinedType;\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(isObject(unrefinedType) || isStruct(unrefinedType) || isInterface(unrefinedType), function () {\n        return 'Invalid argument mixins[' + i + '] supplied to extend(combinator, mixins, options), expected an object, struct, interface or a refinement (of struct or interface)';\n      });\n    }\n\n    pushAll(predicates, decomposition.predicates);\n    mixin(props, getProps(unrefinedType));\n    mixin(prototype, unrefinedType.prototype);\n    mixin(defaultProps, getDefaultProps(unrefinedType), true);\n  });\n  options = combinator.getOptions(options);\n  options.defaultProps = mixin(defaultProps, options.defaultProps, true);\n  var result = compose(predicates, combinator(props, {\n    strict: options.strict,\n    defaultProps: options.defaultProps\n  }), options.name);\n  mixin(result.prototype, prototype);\n  return result;\n}\n\nmodule.exports = extend;","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/node_modules/tcomb/lib/extend.js"],"names":["assert","require","isFunction","isArray","mixin","isStruct","isInterface","isObject","refinement","decompose","compose","predicates","unrefinedType","name","result","reduce","type","predicate","displayName","meta","getProps","props","getDefaultProps","defaultProps","pushAll","arr","elements","Array","prototype","push","apply","extend","combinator","mixins","options","process","env","NODE_ENV","forEach","x","i","decomposition","getOptions","strict","module","exports"],"mappings":"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","sourcesContent":["var assert = require('./assert');\nvar isFunction = require('./isFunction');\nvar isArray = require('./isArray');\nvar mixin = require('./mixin');\nvar isStruct = require('./isStruct');\nvar isInterface = require('./isInterface');\nvar isObject = require('./isObject');\nvar refinement = require('./refinement');\nvar decompose = require('./decompose');\n\nfunction compose(predicates, unrefinedType, name) {\n  var result = predicates.reduce(function (type, predicate) {\n    return refinement(type, predicate);\n  }, unrefinedType);\n  if (name) {\n    result.displayName = name;\n    result.meta.name = name;\n  }\n  return result;\n}\n\nfunction getProps(type) {\n  return isObject(type) ? type : type.meta.props;\n}\n\nfunction getDefaultProps(type) {\n  return isObject(type) ? null : type.meta.defaultProps;\n}\n\nfunction pushAll(arr, elements) {\n  Array.prototype.push.apply(arr, elements);\n}\n\nfunction extend(combinator, mixins, options) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(combinator), function () { return 'Invalid argument combinator supplied to extend(combinator, mixins, options), expected a function'; });\n    assert(isArray(mixins), function () { return 'Invalid argument mixins supplied to extend(combinator, mixins, options), expected an array'; });\n  }\n  var props = {};\n  var prototype = {};\n  var predicates = [];\n  var defaultProps = {};\n  mixins.forEach(function (x, i) {\n    var decomposition = decompose(x);\n    var unrefinedType = decomposition.unrefinedType;\n    if (process.env.NODE_ENV !== 'production') {\n      assert(isObject(unrefinedType) || isStruct(unrefinedType) || isInterface(unrefinedType), function () { return 'Invalid argument mixins[' + i + '] supplied to extend(combinator, mixins, options), expected an object, struct, interface or a refinement (of struct or interface)'; });\n    }\n    pushAll(predicates, decomposition.predicates);\n    mixin(props, getProps(unrefinedType));\n    mixin(prototype, unrefinedType.prototype);\n    mixin(defaultProps, getDefaultProps(unrefinedType), true);\n  });\n  options = combinator.getOptions(options);\n  options.defaultProps = mixin(defaultProps, options.defaultProps, true);\n  var result = compose(predicates, combinator(props, {\n    strict: options.strict,\n    defaultProps: options.defaultProps\n  }), options.name);\n  mixin(result.prototype, prototype);\n  return result;\n}\n\nmodule.exports = extend;\n"]},"metadata":{},"sourceType":"script"}
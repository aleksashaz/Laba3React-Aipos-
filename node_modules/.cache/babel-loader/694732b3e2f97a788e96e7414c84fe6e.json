{"ast":null,"code":"var assert = require('./assert');\n\nvar isTypeName = require('./isTypeName');\n\nvar forbidNewOperator = require('./forbidNewOperator');\n\nvar isNumber = require('./isNumber');\n\nvar isString = require('./isString');\n\nvar isObject = require('./isObject');\n\nfunction getDefaultName(map) {\n  return Object.keys(map).map(function (k) {\n    return assert.stringify(k);\n  }).join(' | ');\n}\n\nfunction enums(map, name) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isObject(map), function () {\n      return 'Invalid argument map ' + assert.stringify(map) + ' supplied to enums(map, [name]) combinator (expected a dictionary of String -> String | Number)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to enums(map, [name]) combinator (expected a string)';\n    });\n  }\n\n  var displayName = name || getDefaultName(map);\n\n  function Enums(value, path) {\n    if (process.env.NODE_ENV !== 'production') {\n      forbidNewOperator(this, Enums);\n      path = path || [displayName];\n      assert(Enums.is(value), function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected one of ' + assert.stringify(Object.keys(map)) + ')';\n      });\n    }\n\n    return value;\n  }\n\n  Enums.meta = {\n    kind: 'enums',\n    map: map,\n    name: name,\n    identity: true\n  };\n  Enums.displayName = displayName;\n\n  Enums.is = function (x) {\n    return (isString(x) || isNumber(x)) && map.hasOwnProperty(x);\n  };\n\n  return Enums;\n}\n\nenums.of = function (keys, name) {\n  keys = isString(keys) ? keys.split(' ') : keys;\n  var value = {};\n  keys.forEach(function (k) {\n    value[k] = k;\n  });\n  return enums(value, name);\n};\n\nenums.getDefaultName = getDefaultName;\nmodule.exports = enums;","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/node_modules/tcomb/lib/enums.js"],"names":["assert","require","isTypeName","forbidNewOperator","isNumber","isString","isObject","getDefaultName","map","Object","keys","k","stringify","join","enums","name","process","env","NODE_ENV","displayName","Enums","value","path","is","meta","kind","identity","x","hasOwnProperty","of","split","forEach","module","exports"],"mappings":"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","sourcesContent":["var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar forbidNewOperator = require('./forbidNewOperator');\nvar isNumber = require('./isNumber');\nvar isString = require('./isString');\nvar isObject = require('./isObject');\n\nfunction getDefaultName(map) {\n  return Object.keys(map).map(function (k) { return assert.stringify(k); }).join(' | ');\n}\n\nfunction enums(map, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isObject(map), function () { return 'Invalid argument map ' + assert.stringify(map) + ' supplied to enums(map, [name]) combinator (expected a dictionary of String -> String | Number)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to enums(map, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || getDefaultName(map);\n\n  function Enums(value, path) {\n\n    if (process.env.NODE_ENV !== 'production') {\n      forbidNewOperator(this, Enums);\n      path = path || [displayName];\n      assert(Enums.is(value), function () { return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected one of ' + assert.stringify(Object.keys(map)) + ')'; });\n    }\n\n    return value;\n  }\n\n  Enums.meta = {\n    kind: 'enums',\n    map: map,\n    name: name,\n    identity: true\n  };\n\n  Enums.displayName = displayName;\n\n  Enums.is = function (x) {\n    return (isString(x) || isNumber(x)) && map.hasOwnProperty(x);\n  };\n\n  return Enums;\n}\n\nenums.of = function (keys, name) {\n  keys = isString(keys) ? keys.split(' ') : keys;\n  var value = {};\n  keys.forEach(function (k) {\n    value[k] = k;\n  });\n  return enums(value, name);\n};\n\nenums.getDefaultName = getDefaultName;\nmodule.exports = enums;\n\n"]},"metadata":{},"sourceType":"script"}
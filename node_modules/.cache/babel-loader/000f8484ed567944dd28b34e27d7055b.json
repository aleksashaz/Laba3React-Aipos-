{"ast":null,"code":"var assert = require('./assert');\n\nvar Boolean = require('./Boolean');\n\nvar isType = require('./isType');\n\nvar getTypeName = require('./getTypeName'); // return true if the type constructor behaves like the identity function\n\n\nmodule.exports = function isIdentity(type) {\n  if (isType(type)) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(Boolean.is(type.meta.identity), function () {\n        return 'Invalid meta identity ' + assert.stringify(type.meta.identity) + ' supplied to type ' + getTypeName(type);\n      });\n    }\n\n    return type.meta.identity;\n  } // for tcomb the other constructors, like ES6 classes, are identity-like\n\n\n  return true;\n};","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/node_modules/tcomb/lib/isIdentity.js"],"names":["assert","require","Boolean","isType","getTypeName","module","exports","isIdentity","type","process","env","NODE_ENV","is","meta","identity","stringify"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,eAAD,CAAzB,C,CAEA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACzC,MAAIL,MAAM,CAACK,IAAD,CAAV,EAAkB;AAChB,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCX,MAAAA,MAAM,CAACE,OAAO,CAACU,EAAR,CAAWJ,IAAI,CAACK,IAAL,CAAUC,QAArB,CAAD,EAAiC,YAAY;AAAE,eAAO,2BAA2Bd,MAAM,CAACe,SAAP,CAAiBP,IAAI,CAACK,IAAL,CAAUC,QAA3B,CAA3B,GAAkE,oBAAlE,GAAyFV,WAAW,CAACI,IAAD,CAA3G;AAAoH,OAAnK,CAAN;AACD;;AACD,WAAOA,IAAI,CAACK,IAAL,CAAUC,QAAjB;AACD,GANwC,CAOzC;;;AACA,SAAO,IAAP;AACD,CATD","sourcesContent":["var assert = require('./assert');\nvar Boolean = require('./Boolean');\nvar isType = require('./isType');\nvar getTypeName = require('./getTypeName');\n\n// return true if the type constructor behaves like the identity function\nmodule.exports = function isIdentity(type) {\n  if (isType(type)) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(Boolean.is(type.meta.identity), function () { return 'Invalid meta identity ' + assert.stringify(type.meta.identity) + ' supplied to type ' + getTypeName(type); });\n    }\n    return type.meta.identity;\n  }\n  // for tcomb the other constructors, like ES6 classes, are identity-like\n  return true;\n};"]},"metadata":{},"sourceType":"script"}
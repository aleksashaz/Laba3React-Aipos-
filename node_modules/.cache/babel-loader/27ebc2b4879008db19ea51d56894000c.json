{"ast":null,"code":"var assert = require('./assert');\n\nvar isObject = require('./isObject');\n\nvar isFunction = require('./isFunction');\n\nvar isArray = require('./isArray');\n\nvar isNumber = require('./isNumber');\n\nvar assign = require('./assign');\n\nfunction getShallowCopy(x) {\n  if (isObject(x)) {\n    if (x instanceof Date || x instanceof RegExp) {\n      return x;\n    }\n\n    return assign({}, x);\n  }\n\n  if (isArray(x)) {\n    return x.concat();\n  }\n\n  return x;\n}\n\nfunction isCommand(k) {\n  return update.commands.hasOwnProperty(k);\n}\n\nfunction getCommand(k) {\n  return update.commands[k];\n}\n\nfunction update(instance, patch) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isObject(patch), function () {\n      return 'Invalid argument patch ' + assert.stringify(patch) + ' supplied to function update(instance, patch): expected an object containing commands';\n    });\n  }\n\n  var value = instance;\n  var isChanged = false;\n  var newValue;\n\n  for (var k in patch) {\n    if (patch.hasOwnProperty(k)) {\n      if (isCommand(k)) {\n        newValue = getCommand(k)(patch[k], value);\n\n        if (newValue !== instance) {\n          isChanged = true;\n          value = newValue;\n        } else {\n          value = instance;\n        }\n      } else {\n        if (value === instance) {\n          value = getShallowCopy(instance);\n        }\n\n        newValue = update(value[k], patch[k]);\n        isChanged = isChanged || newValue !== value[k];\n        value[k] = newValue;\n      }\n    }\n  }\n\n  return isChanged ? value : instance;\n} // built-in commands\n\n\nfunction $apply(f, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(f), 'Invalid argument f supplied to immutability helper { $apply: f } (expected a function)');\n  }\n\n  return f(value);\n}\n\nfunction $push(elements, arr) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(elements), 'Invalid argument elements supplied to immutability helper { $push: elements } (expected an array)');\n    assert(isArray(arr), 'Invalid value supplied to immutability helper $push (expected an array)');\n  }\n\n  if (elements.length > 0) {\n    return arr.concat(elements);\n  }\n\n  return arr;\n}\n\nfunction $remove(keys, obj) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(keys), 'Invalid argument keys supplied to immutability helper { $remove: keys } (expected an array)');\n    assert(isObject(obj), 'Invalid value supplied to immutability helper $remove (expected an object)');\n  }\n\n  if (keys.length > 0) {\n    obj = getShallowCopy(obj);\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      delete obj[keys[i]];\n    }\n  }\n\n  return obj;\n}\n\nfunction $set(value) {\n  return value;\n}\n\nfunction $splice(splices, arr) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(splices) && splices.every(isArray), 'Invalid argument splices supplied to immutability helper { $splice: splices } (expected an array of arrays)');\n    assert(isArray(arr), 'Invalid value supplied to immutability helper $splice (expected an array)');\n  }\n\n  if (splices.length > 0) {\n    arr = getShallowCopy(arr);\n    return splices.reduce(function (acc, splice) {\n      acc.splice.apply(acc, splice);\n      return acc;\n    }, arr);\n  }\n\n  return arr;\n}\n\nfunction $swap(config, arr) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isObject(config), 'Invalid argument config supplied to immutability helper { $swap: config } (expected an object)');\n    assert(isNumber(config.from), 'Invalid argument config.from supplied to immutability helper { $swap: config } (expected a number)');\n    assert(isNumber(config.to), 'Invalid argument config.to supplied to immutability helper { $swap: config } (expected a number)');\n    assert(isArray(arr), 'Invalid value supplied to immutability helper $swap (expected an array)');\n  }\n\n  if (config.from !== config.to) {\n    arr = getShallowCopy(arr);\n    var element = arr[config.to];\n    arr[config.to] = arr[config.from];\n    arr[config.from] = element;\n  }\n\n  return arr;\n}\n\nfunction $unshift(elements, arr) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(elements), 'Invalid argument elements supplied to immutability helper {$unshift: elements} (expected an array)');\n    assert(isArray(arr), 'Invalid value supplied to immutability helper $unshift (expected an array)');\n  }\n\n  if (elements.length > 0) {\n    return elements.concat(arr);\n  }\n\n  return arr;\n}\n\nfunction $merge(whatToMerge, value) {\n  var isChanged = false;\n  var result = getShallowCopy(value);\n\n  for (var k in whatToMerge) {\n    if (whatToMerge.hasOwnProperty(k)) {\n      result[k] = whatToMerge[k];\n      isChanged = isChanged || result[k] !== value[k];\n    }\n  }\n\n  return isChanged ? result : value;\n}\n\nupdate.commands = {\n  $apply: $apply,\n  $push: $push,\n  $remove: $remove,\n  $set: $set,\n  $splice: $splice,\n  $swap: $swap,\n  $unshift: $unshift,\n  $merge: $merge\n};\nmodule.exports = update;","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/node_modules/tcomb/lib/update.js"],"names":["assert","require","isObject","isFunction","isArray","isNumber","assign","getShallowCopy","x","Date","RegExp","concat","isCommand","k","update","commands","hasOwnProperty","getCommand","instance","patch","process","env","NODE_ENV","stringify","value","isChanged","newValue","$apply","f","$push","elements","arr","length","$remove","keys","obj","i","len","$set","$splice","splices","every","reduce","acc","splice","apply","$swap","config","from","to","element","$unshift","$merge","whatToMerge","result","module","exports"],"mappings":"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","sourcesContent":["var assert = require('./assert');\nvar isObject = require('./isObject');\nvar isFunction = require('./isFunction');\nvar isArray = require('./isArray');\nvar isNumber = require('./isNumber');\nvar assign = require('./assign');\n\nfunction getShallowCopy(x) {\n  if (isObject(x)) {\n    if (x instanceof Date || x instanceof RegExp) {\n      return x;\n    }\n    return assign({}, x);\n  }\n  if (isArray(x)) {\n    return x.concat();\n  }\n  return x;\n}\n\nfunction isCommand(k) {\n  return update.commands.hasOwnProperty(k);\n}\n\nfunction getCommand(k) {\n  return update.commands[k];\n}\n\nfunction update(instance, patch) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isObject(patch), function () { return 'Invalid argument patch ' + assert.stringify(patch) + ' supplied to function update(instance, patch): expected an object containing commands'; });\n  }\n\n  var value = instance;\n  var isChanged = false;\n  var newValue;\n  for (var k in patch) {\n    if (patch.hasOwnProperty(k)) {\n      if (isCommand(k)) {\n        newValue = getCommand(k)(patch[k], value);\n        if (newValue !== instance) {\n          isChanged = true;\n          value = newValue;\n        } else {\n          value = instance;\n        }\n      }\n      else {\n        if (value === instance) {\n          value = getShallowCopy(instance);\n        }\n        newValue = update(value[k], patch[k]);\n        isChanged = isChanged || ( newValue !== value[k] );\n        value[k] = newValue;\n      }\n    }\n  }\n  return isChanged ? value : instance;\n}\n\n// built-in commands\n\nfunction $apply(f, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(f), 'Invalid argument f supplied to immutability helper { $apply: f } (expected a function)');\n  }\n  return f(value);\n}\n\nfunction $push(elements, arr) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(elements), 'Invalid argument elements supplied to immutability helper { $push: elements } (expected an array)');\n    assert(isArray(arr), 'Invalid value supplied to immutability helper $push (expected an array)');\n  }\n  if (elements.length > 0) {\n    return arr.concat(elements);\n  }\n  return arr;\n}\n\nfunction $remove(keys, obj) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(keys), 'Invalid argument keys supplied to immutability helper { $remove: keys } (expected an array)');\n    assert(isObject(obj), 'Invalid value supplied to immutability helper $remove (expected an object)');\n  }\n  if (keys.length > 0) {\n    obj = getShallowCopy(obj);\n    for (var i = 0, len = keys.length; i < len; i++ ) {\n      delete obj[keys[i]];\n    }\n  }\n  return obj;\n}\n\nfunction $set(value) {\n  return value;\n}\n\nfunction $splice(splices, arr) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(splices) && splices.every(isArray), 'Invalid argument splices supplied to immutability helper { $splice: splices } (expected an array of arrays)');\n    assert(isArray(arr), 'Invalid value supplied to immutability helper $splice (expected an array)');\n  }\n  if (splices.length > 0) {\n    arr = getShallowCopy(arr);\n    return splices.reduce(function (acc, splice) {\n      acc.splice.apply(acc, splice);\n      return acc;\n    }, arr);\n  }\n  return arr;\n}\n\nfunction $swap(config, arr) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isObject(config), 'Invalid argument config supplied to immutability helper { $swap: config } (expected an object)');\n    assert(isNumber(config.from), 'Invalid argument config.from supplied to immutability helper { $swap: config } (expected a number)');\n    assert(isNumber(config.to), 'Invalid argument config.to supplied to immutability helper { $swap: config } (expected a number)');\n    assert(isArray(arr), 'Invalid value supplied to immutability helper $swap (expected an array)');\n  }\n  if (config.from !== config.to) {\n    arr = getShallowCopy(arr);\n    var element = arr[config.to];\n    arr[config.to] = arr[config.from];\n    arr[config.from] = element;\n  }\n  return arr;\n}\n\nfunction $unshift(elements, arr) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(elements), 'Invalid argument elements supplied to immutability helper {$unshift: elements} (expected an array)');\n    assert(isArray(arr), 'Invalid value supplied to immutability helper $unshift (expected an array)');\n  }\n  if (elements.length > 0) {\n    return elements.concat(arr);\n  }\n  return arr;\n}\n\nfunction $merge(whatToMerge, value) {\n  var isChanged = false;\n  var result = getShallowCopy(value);\n  for (var k in whatToMerge) {\n    if (whatToMerge.hasOwnProperty(k)) {\n      result[k] = whatToMerge[k];\n      isChanged = isChanged || ( result[k] !== value[k] );\n    }\n  }\n  return isChanged ? result : value;\n}\n\nupdate.commands = {\n  $apply: $apply,\n  $push: $push,\n  $remove: $remove,\n  $set: $set,\n  $splice: $splice,\n  $swap: $swap,\n  $unshift: $unshift,\n  $merge: $merge\n};\n\nmodule.exports = update;\n"]},"metadata":{},"sourceType":"script"}
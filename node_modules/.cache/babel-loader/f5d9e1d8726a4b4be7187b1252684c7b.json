{"ast":null,"code":"var isType = require('./isType');\n\nvar getFunctionName = require('./getFunctionName');\n\nvar assert = require('./assert');\n\nvar stringify = require('./stringify'); // creates an instance of a type, handling the optional new operator\n\n\nmodule.exports = function create(type, value, path) {\n  if (isType(type)) {\n    return !type.meta.identity && typeof value === 'object' && value !== null ? new type(value, path) : type(value, path);\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    // here type should be a class constructor and value some instance, just check membership and return the value\n    path = path || [getFunctionName(type)];\n    assert(value instanceof type, function () {\n      return 'Invalid value ' + stringify(value) + ' supplied to ' + path.join('/');\n    });\n  }\n\n  return value;\n};","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/node_modules/tcomb/lib/create.js"],"names":["isType","require","getFunctionName","assert","stringify","module","exports","create","type","value","path","meta","identity","process","env","NODE_ENV","join"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA7B;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB,C,CAEA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAmC;AAClD,MAAIV,MAAM,CAACQ,IAAD,CAAV,EAAkB;AAChB,WAAO,CAACA,IAAI,CAACG,IAAL,CAAUC,QAAX,IAAuB,OAAOH,KAAP,KAAiB,QAAxC,IAAoDA,KAAK,KAAK,IAA9D,GAAqE,IAAID,IAAJ,CAASC,KAAT,EAAgBC,IAAhB,CAArE,GAA4FF,IAAI,CAACC,KAAD,EAAQC,IAAR,CAAvG;AACD;;AAED,MAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAL,IAAAA,IAAI,GAAGA,IAAI,IAAI,CAACR,eAAe,CAACM,IAAD,CAAhB,CAAf;AACAL,IAAAA,MAAM,CAACM,KAAK,YAAYD,IAAlB,EAAwB,YAAY;AAAE,aAAO,mBAAmBJ,SAAS,CAACK,KAAD,CAA5B,GAAsC,eAAtC,GAAwDC,IAAI,CAACM,IAAL,CAAU,GAAV,CAA/D;AAAgF,KAAtH,CAAN;AACD;;AAED,SAAOP,KAAP;AACD,CAZD","sourcesContent":["var isType = require('./isType');\nvar getFunctionName = require('./getFunctionName');\nvar assert = require('./assert');\nvar stringify = require('./stringify');\n\n// creates an instance of a type, handling the optional new operator\nmodule.exports = function create(type, value, path) {\n  if (isType(type)) {\n    return !type.meta.identity && typeof value === 'object' && value !== null ? new type(value, path): type(value, path);\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    // here type should be a class constructor and value some instance, just check membership and return the value\n    path = path || [getFunctionName(type)];\n    assert(value instanceof type, function () { return 'Invalid value ' + stringify(value) + ' supplied to ' + path.join('/'); });\n  }\n\n  return value;\n};"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"const {\n  stringify\n} = JSON;\nconst headers = {\n  credentials: 'include',\n  'Content-type': 'application/json',\n  Accept: 'application/json;charset=UTF-8',\n  'Access-Control-Allow-Origin': '*'\n};\nheaders.Authorization = 'Basic '; // + authdata\n\nconst apiPathUrl = 'https://localhost:8443';\n\nconst getFullUrl = (url, params) => apiPathUrl + (url || '') + (params ? '?' + queryParams(params) : '');\n\nfunction queryParams(params) {\n  return Object.keys(params).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&');\n}\n\nconst credentials = 'same-origin';\nconst async = {\n  getJSON({\n    url,\n    params\n  }) {\n    return fetch(getFullUrl(url, params), {\n      headers,\n      credentials\n    });\n  },\n\n  postJSON({\n    url,\n    data,\n    params,\n    options = {}\n  }) {\n    console.log(stringify(data));\n    return fetch(getFullUrl(url, params), { ...options,\n      headers,\n      credentials,\n      method: 'POST',\n      body: stringify(data),\n      mode: 'cors'\n    });\n  },\n\n  deleteJSON({\n    url,\n    data,\n    options = {}\n  }) {\n    return fetch(getFullUrl(url), { ...options,\n      headers,\n      credentials,\n      method: 'DELETE',\n      body: stringify(data)\n    });\n  }\n\n};\nexport default ((method, ...args) => {\n  return async[method](...args).then(response => {\n    if (method === 'getJSON') {\n      return response.json();\n    }\n\n    return response.json();\n  }).catch(error => {// throwNotification('error', 'Серверная ошибка')\n  });\n});","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/src/api/asyncApi.js"],"names":["stringify","JSON","headers","credentials","Accept","Authorization","apiPathUrl","getFullUrl","url","params","queryParams","Object","keys","map","k","encodeURIComponent","join","async","getJSON","fetch","postJSON","data","options","console","log","method","body","mode","deleteJSON","args","then","response","json","catch","error"],"mappings":"AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,IAAtB;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,WAAW,EAAE,SADD;AAEZ,kBAAgB,kBAFJ;AAGZC,EAAAA,MAAM,EAAE,gCAHI;AAIZ,iCAA+B;AAJnB,CAAhB;AAOAF,OAAO,CAACG,aAAR,GAAwB,QAAxB,C,CAAgC;;AAE/B,MAAMC,UAAU,GAAG,wBAAnB;;AAED,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,MAAN,KACfH,UAAU,IAAIE,GAAG,IAAI,EAAX,CAAV,IAA4BC,MAAM,GAAG,MAAMC,WAAW,CAACD,MAAD,CAApB,GAA+B,EAAjE,CADJ;;AAGA,SAASC,WAAT,CAAqBD,MAArB,EAA6B;AACzB,SAAOE,MAAM,CAACC,IAAP,CAAYH,MAAZ,EACFI,GADE,CACEC,CAAC,IAAIC,kBAAkB,CAACD,CAAD,CAAlB,GAAwB,GAAxB,GAA8BC,kBAAkB,CAACN,MAAM,CAACK,CAAD,CAAP,CADvD,EAEFE,IAFE,CAEG,GAFH,CAAP;AAGH;;AAED,MAAMb,WAAW,GAAG,aAApB;AAEA,MAAMc,KAAK,GAAG;AACVC,EAAAA,OAAO,CAAC;AAAEV,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAAD,EAAiB;AACpB,WAAOU,KAAK,CAACZ,UAAU,CAACC,GAAD,EAAMC,MAAN,CAAX,EAA0B;AAClCP,MAAAA,OADkC;AAElCC,MAAAA;AAFkC,KAA1B,CAAZ;AAIH,GANS;;AAOViB,EAAAA,QAAQ,CAAC;AAAEZ,IAAAA,GAAF;AAAOa,IAAAA,IAAP;AAAaZ,IAAAA,MAAb;AAAqBa,IAAAA,OAAO,GAAG;AAA/B,GAAD,EAAsC;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAYxB,SAAS,CAACqB,IAAD,CAArB;AACA,WAAOF,KAAK,CAACZ,UAAU,CAACC,GAAD,EAAMC,MAAN,CAAX,EAA0B,EAClC,GAAGa,OAD+B;AAElCpB,MAAAA,OAFkC;AAGlCC,MAAAA,WAHkC;AAIlCsB,MAAAA,MAAM,EAAE,MAJ0B;AAKlCC,MAAAA,IAAI,EAAE1B,SAAS,CAACqB,IAAD,CALmB;AAMlCM,MAAAA,IAAI,EAAE;AAN4B,KAA1B,CAAZ;AAQH,GAjBS;;AAkBVC,EAAAA,UAAU,CAAC;AAAEpB,IAAAA,GAAF;AAAOa,IAAAA,IAAP;AAAaC,IAAAA,OAAO,GAAG;AAAvB,GAAD,EAA8B;AACpC,WAAOH,KAAK,CAACZ,UAAU,CAACC,GAAD,CAAX,EAAkB,EAC1B,GAAGc,OADuB;AAE1BpB,MAAAA,OAF0B;AAG1BC,MAAAA,WAH0B;AAI1BsB,MAAAA,MAAM,EAAE,QAJkB;AAK1BC,MAAAA,IAAI,EAAE1B,SAAS,CAACqB,IAAD;AALW,KAAlB,CAAZ;AAOH;;AA1BS,CAAd;AA6BA,gBAAe,CAACI,MAAD,EAAS,GAAGI,IAAZ,KAAqB;AAChC,SAAOZ,KAAK,CAACQ,MAAD,CAAL,CAAc,GAAGI,IAAjB,EACFC,IADE,CACGC,QAAQ,IAAI;AACd,QAAIN,MAAM,KAAK,SAAf,EAA0B;AACtB,aAAOM,QAAQ,CAACC,IAAT,EAAP;AACH;;AACD,WAAOD,QAAQ,CAACC,IAAT,EAAP;AACH,GANE,EAOFC,KAPE,CAOIC,KAAK,IAAI,CACb;AACF,GATE,CAAP;AAUH,CAXD","sourcesContent":["\r\n\r\nconst { stringify } = JSON\r\n\r\nconst headers = {\r\n    credentials: 'include',\r\n    'Content-type': 'application/json',\r\n    Accept: 'application/json;charset=UTF-8',\r\n    'Access-Control-Allow-Origin': '*',\r\n}\r\n\r\nheaders.Authorization = 'Basic '// + authdata\r\n\r\n const apiPathUrl = 'https://localhost:8443';\r\n\r\nconst getFullUrl = (url, params) =>\r\n    apiPathUrl + (url || '') + (params ? '?' + queryParams(params) : '')\r\n\r\nfunction queryParams(params) {\r\n    return Object.keys(params)\r\n        .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))\r\n        .join('&')\r\n}\r\n\r\nconst credentials = 'same-origin'\r\n\r\nconst async = {\r\n    getJSON({ url, params}) {\r\n        return fetch(getFullUrl(url, params), {\r\n            headers,\r\n            credentials,\r\n        })\r\n    },\r\n    postJSON({ url, data, params, options = {} }) {\r\n        console.log(stringify(data));\r\n        return fetch(getFullUrl(url, params), {\r\n            ...options,\r\n            headers,\r\n            credentials,\r\n            method: 'POST',\r\n            body: stringify(data),\r\n            mode: 'cors',\r\n        });\r\n    },\r\n    deleteJSON({ url, data, options = {} }) {\r\n        return fetch(getFullUrl(url), {\r\n            ...options,\r\n            headers,\r\n            credentials,\r\n            method: 'DELETE',\r\n            body: stringify(data),\r\n        })\r\n    },\r\n}\r\n\r\nexport default (method, ...args) => {\r\n    return async[method](...args)\r\n        .then(response => {\r\n            if (method === 'getJSON') {\r\n                return response.json()\r\n            }\r\n            return response.json()\r\n        })\r\n        .catch(error => {\r\n           // throwNotification('error', 'Серверная ошибка')\r\n        })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
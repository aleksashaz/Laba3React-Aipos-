{"ast":null,"code":"var assert = require('./assert');\n\nvar isTypeName = require('./isTypeName');\n\nvar String = require('./String');\n\nvar Function = require('./Function');\n\nvar isBoolean = require('./isBoolean');\n\nvar isObject = require('./isObject');\n\nvar isNil = require('./isNil');\n\nvar create = require('./create');\n\nvar getTypeName = require('./getTypeName');\n\nvar dict = require('./dict');\n\nvar getDefaultInterfaceName = require('./getDefaultInterfaceName');\n\nvar isIdentity = require('./isIdentity');\n\nvar is = require('./is');\n\nvar extend = require('./extend');\n\nvar assign = require('./assign');\n\nfunction extendInterface(mixins, name) {\n  return extend(inter, mixins, name);\n}\n\nfunction getOptions(options) {\n  if (!isObject(options)) {\n    options = isNil(options) ? {} : {\n      name: options\n    };\n  }\n\n  if (!options.hasOwnProperty('strict')) {\n    options.strict = inter.strict;\n  }\n\n  return options;\n}\n\nfunction inter(props, options) {\n  options = getOptions(options);\n  var name = options.name;\n  var strict = options.strict;\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(dict(String, Function).is(props), function () {\n      return 'Invalid argument props ' + assert.stringify(props) + ' supplied to interface(props, [options]) combinator (expected a dictionary String -> Type)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to interface(props, [options]) combinator (expected a string)';\n    });\n    assert(isBoolean(strict), function () {\n      return 'Invalid argument strict ' + assert.stringify(strict) + ' supplied to struct(props, [options]) combinator (expected a boolean)';\n    });\n  }\n\n  var displayName = name || getDefaultInterfaceName(props);\n  var identity = Object.keys(props).map(function (prop) {\n    return props[prop];\n  }).every(isIdentity);\n\n  function Interface(value, path) {\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value; // just trust the input if elements must not be hydrated\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(!isNil(value), function () {\n        return 'Invalid value ' + value + ' supplied to ' + path.join('/');\n      }); // strictness\n\n      if (strict) {\n        for (var k in value) {\n          assert(props.hasOwnProperty(k), function () {\n            return 'Invalid additional prop \"' + k + '\" supplied to ' + path.join('/');\n          });\n        }\n      }\n    }\n\n    var idempotent = true;\n    var ret = identity ? {} : assign({}, value);\n\n    for (var prop in props) {\n      var expected = props[prop];\n      var actual = value[prop];\n      var instance = create(expected, actual, process.env.NODE_ENV !== 'production' ? path.concat(prop + ': ' + getTypeName(expected)) : null);\n      idempotent = idempotent && actual === instance;\n      ret[prop] = instance;\n    }\n\n    if (idempotent) {\n      // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n  }\n\n  Interface.meta = {\n    kind: 'interface',\n    props: props,\n    name: name,\n    identity: identity,\n    strict: strict\n  };\n  Interface.displayName = displayName;\n\n  Interface.is = function (x) {\n    if (isNil(x)) {\n      return false;\n    }\n\n    if (strict) {\n      for (var k in x) {\n        if (!props.hasOwnProperty(k)) {\n          return false;\n        }\n      }\n    }\n\n    for (var prop in props) {\n      if (!is(x[prop], props[prop])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  Interface.update = function (instance, patch) {\n    return Interface(assert.update(instance, patch));\n  };\n\n  Interface.extend = function (xs, name) {\n    return extendInterface([Interface].concat(xs), name);\n  };\n\n  return Interface;\n}\n\ninter.strict = false;\ninter.getOptions = getOptions;\ninter.getDefaultName = getDefaultInterfaceName;\ninter.extend = extendInterface;\nmodule.exports = inter;","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/node_modules/tcomb/lib/interface.js"],"names":["assert","require","isTypeName","String","Function","isBoolean","isObject","isNil","create","getTypeName","dict","getDefaultInterfaceName","isIdentity","is","extend","assign","extendInterface","mixins","name","inter","getOptions","options","hasOwnProperty","strict","props","process","env","NODE_ENV","stringify","displayName","identity","Object","keys","map","prop","every","Interface","value","path","join","k","idempotent","ret","expected","actual","instance","concat","freeze","meta","kind","x","update","patch","xs","getDefaultName","module","exports"],"mappings":"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","sourcesContent":["var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar String = require('./String');\nvar Function = require('./Function');\nvar isBoolean = require('./isBoolean');\nvar isObject = require('./isObject');\nvar isNil = require('./isNil');\nvar create = require('./create');\nvar getTypeName = require('./getTypeName');\nvar dict = require('./dict');\nvar getDefaultInterfaceName = require('./getDefaultInterfaceName');\nvar isIdentity = require('./isIdentity');\nvar is = require('./is');\nvar extend = require('./extend');\nvar assign = require('./assign');\n\nfunction extendInterface(mixins, name) {\n  return extend(inter, mixins, name);\n}\n\nfunction getOptions(options) {\n  if (!isObject(options)) {\n    options = isNil(options) ? {} : { name: options };\n  }\n  if (!options.hasOwnProperty('strict')) {\n    options.strict = inter.strict;\n  }\n  return options;\n}\n\nfunction inter(props, options) {\n\n  options = getOptions(options);\n  var name = options.name;\n  var strict = options.strict;\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(dict(String, Function).is(props), function () { return 'Invalid argument props ' + assert.stringify(props) + ' supplied to interface(props, [options]) combinator (expected a dictionary String -> Type)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to interface(props, [options]) combinator (expected a string)'; });\n    assert(isBoolean(strict), function () { return 'Invalid argument strict ' + assert.stringify(strict) + ' supplied to struct(props, [options]) combinator (expected a boolean)'; });\n  }\n\n  var displayName = name || getDefaultInterfaceName(props);\n  var identity = Object.keys(props).map(function (prop) { return props[prop]; }).every(isIdentity);\n\n  function Interface(value, path) {\n\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value; // just trust the input if elements must not be hydrated\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(!isNil(value), function () { return 'Invalid value ' + value + ' supplied to ' + path.join('/'); });\n      // strictness\n      if (strict) {\n        for (var k in value) {\n          assert(props.hasOwnProperty(k), function () { return 'Invalid additional prop \"' + k + '\" supplied to ' + path.join('/'); });\n        }\n      }\n    }\n\n    var idempotent = true;\n    var ret = identity ? {} : assign({}, value);\n    for (var prop in props) {\n      var expected = props[prop];\n      var actual = value[prop];\n      var instance = create(expected, actual, ( process.env.NODE_ENV !== 'production' ? path.concat(prop + ': ' + getTypeName(expected)) : null ));\n      idempotent = idempotent && ( actual === instance );\n      ret[prop] = instance;\n    }\n\n    if (idempotent) { // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n\n  }\n\n  Interface.meta = {\n    kind: 'interface',\n    props: props,\n    name: name,\n    identity: identity,\n    strict: strict\n  };\n\n  Interface.displayName = displayName;\n\n  Interface.is = function (x) {\n    if (isNil(x)) {\n      return false;\n    }\n    if (strict) {\n      for (var k in x) {\n        if (!props.hasOwnProperty(k)) {\n          return false;\n        }\n      }\n    }\n    for (var prop in props) {\n      if (!is(x[prop], props[prop])) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  Interface.update = function (instance, patch) {\n    return Interface(assert.update(instance, patch));\n  };\n\n  Interface.extend = function (xs, name) {\n    return extendInterface([Interface].concat(xs), name);\n  };\n\n  return Interface;\n}\n\ninter.strict = false;\ninter.getOptions = getOptions;\ninter.getDefaultName = getDefaultInterfaceName;\ninter.extend = extendInterface;\nmodule.exports = inter;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var assert = require('./assert');\n\nvar isTypeName = require('./isTypeName');\n\nvar isFunction = require('./isFunction');\n\nvar isMaybe = require('./isMaybe');\n\nvar isIdentity = require('./isIdentity');\n\nvar Any = require('./Any');\n\nvar create = require('./create');\n\nvar Nil = require('./Nil');\n\nvar forbidNewOperator = require('./forbidNewOperator');\n\nvar is = require('./is');\n\nvar getTypeName = require('./getTypeName');\n\nfunction getDefaultName(type) {\n  return '?' + getTypeName(type);\n}\n\nfunction maybe(type, name) {\n  if (isMaybe(type) || type === Any || type === Nil) {\n    // makes the combinator idempotent and handle Any, Nil\n    return type;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(type), function () {\n      return 'Invalid argument type ' + assert.stringify(type) + ' supplied to maybe(type, [name]) combinator (expected a type)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to maybe(type, [name]) combinator (expected a string)';\n    });\n  }\n\n  var displayName = name || getDefaultName(type);\n  var identity = isIdentity(type);\n\n  function Maybe(value, path) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (identity) {\n        forbidNewOperator(this, Maybe);\n      }\n    }\n\n    return Nil.is(value) ? value : create(type, value, path);\n  }\n\n  Maybe.meta = {\n    kind: 'maybe',\n    type: type,\n    name: name,\n    identity: identity\n  };\n  Maybe.displayName = displayName;\n\n  Maybe.is = function (x) {\n    return Nil.is(x) || is(x, type);\n  };\n\n  return Maybe;\n}\n\nmaybe.getDefaultName = getDefaultName;\nmodule.exports = maybe;","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/node_modules/tcomb/lib/maybe.js"],"names":["assert","require","isTypeName","isFunction","isMaybe","isIdentity","Any","create","Nil","forbidNewOperator","is","getTypeName","getDefaultName","type","maybe","name","process","env","NODE_ENV","stringify","displayName","identity","Maybe","value","path","meta","kind","x","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,WAAD,CAArB;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIK,GAAG,GAAGL,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAIM,MAAM,GAAGN,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIO,GAAG,GAAGP,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAIQ,iBAAiB,GAAGR,OAAO,CAAC,qBAAD,CAA/B;;AACA,IAAIS,EAAE,GAAGT,OAAO,CAAC,MAAD,CAAhB;;AACA,IAAIU,WAAW,GAAGV,OAAO,CAAC,eAAD,CAAzB;;AAEA,SAASW,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,SAAO,MAAMF,WAAW,CAACE,IAAD,CAAxB;AACD;;AAED,SAASC,KAAT,CAAeD,IAAf,EAAqBE,IAArB,EAA2B;AAEzB,MAAIX,OAAO,CAACS,IAAD,CAAP,IAAiBA,IAAI,KAAKP,GAA1B,IAAiCO,IAAI,KAAKL,GAA9C,EAAmD;AAAE;AACnD,WAAOK,IAAP;AACD;;AAED,MAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzClB,IAAAA,MAAM,CAACG,UAAU,CAACU,IAAD,CAAX,EAAmB,YAAY;AAAE,aAAO,2BAA2Bb,MAAM,CAACmB,SAAP,CAAiBN,IAAjB,CAA3B,GAAoD,+DAA3D;AAA6H,KAA9J,CAAN;AACAb,IAAAA,MAAM,CAACE,UAAU,CAACa,IAAD,CAAX,EAAmB,YAAY;AAAE,aAAO,2BAA2Bf,MAAM,CAACmB,SAAP,CAAiBJ,IAAjB,CAA3B,GAAoD,iEAA3D;AAA+H,KAAhK,CAAN;AACD;;AAED,MAAIK,WAAW,GAAGL,IAAI,IAAIH,cAAc,CAACC,IAAD,CAAxC;AACA,MAAIQ,QAAQ,GAAGhB,UAAU,CAACQ,IAAD,CAAzB;;AAEA,WAASS,KAAT,CAAeC,KAAf,EAAsBC,IAAtB,EAA4B;AAC1B,QAAIR,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIG,QAAJ,EAAc;AACZZ,QAAAA,iBAAiB,CAAC,IAAD,EAAOa,KAAP,CAAjB;AACD;AACF;;AACD,WAAOd,GAAG,CAACE,EAAJ,CAAOa,KAAP,IAAgBA,KAAhB,GAAwBhB,MAAM,CAACM,IAAD,EAAOU,KAAP,EAAcC,IAAd,CAArC;AACD;;AAEDF,EAAAA,KAAK,CAACG,IAAN,GAAa;AACXC,IAAAA,IAAI,EAAE,OADK;AAEXb,IAAAA,IAAI,EAAEA,IAFK;AAGXE,IAAAA,IAAI,EAAEA,IAHK;AAIXM,IAAAA,QAAQ,EAAEA;AAJC,GAAb;AAOAC,EAAAA,KAAK,CAACF,WAAN,GAAoBA,WAApB;;AAEAE,EAAAA,KAAK,CAACZ,EAAN,GAAW,UAAUiB,CAAV,EAAa;AACtB,WAAOnB,GAAG,CAACE,EAAJ,CAAOiB,CAAP,KAAajB,EAAE,CAACiB,CAAD,EAAId,IAAJ,CAAtB;AACD,GAFD;;AAIA,SAAOS,KAAP;AACD;;AAEDR,KAAK,CAACF,cAAN,GAAuBA,cAAvB;AACAgB,MAAM,CAACC,OAAP,GAAiBf,KAAjB","sourcesContent":["var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar isMaybe = require('./isMaybe');\nvar isIdentity = require('./isIdentity');\nvar Any = require('./Any');\nvar create = require('./create');\nvar Nil = require('./Nil');\nvar forbidNewOperator = require('./forbidNewOperator');\nvar is = require('./is');\nvar getTypeName = require('./getTypeName');\n\nfunction getDefaultName(type) {\n  return '?' + getTypeName(type);\n}\n\nfunction maybe(type, name) {\n\n  if (isMaybe(type) || type === Any || type === Nil) { // makes the combinator idempotent and handle Any, Nil\n    return type;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(type), function () { return 'Invalid argument type ' + assert.stringify(type) + ' supplied to maybe(type, [name]) combinator (expected a type)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to maybe(type, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || getDefaultName(type);\n  var identity = isIdentity(type);\n\n  function Maybe(value, path) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (identity) {\n        forbidNewOperator(this, Maybe);\n      }\n    }\n    return Nil.is(value) ? value : create(type, value, path);\n  }\n\n  Maybe.meta = {\n    kind: 'maybe',\n    type: type,\n    name: name,\n    identity: identity\n  };\n\n  Maybe.displayName = displayName;\n\n  Maybe.is = function (x) {\n    return Nil.is(x) || is(x, type);\n  };\n\n  return Maybe;\n}\n\nmaybe.getDefaultName = getDefaultName;\nmodule.exports = maybe;\n"]},"metadata":{},"sourceType":"script"}
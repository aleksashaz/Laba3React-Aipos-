{"ast":null,"code":"var assert = require('./assert');\n\nvar isTypeName = require('./isTypeName');\n\nvar isFunction = require('./isFunction');\n\nvar getTypeName = require('./getTypeName');\n\nvar isIdentity = require('./isIdentity');\n\nvar isObject = require('./isObject');\n\nvar create = require('./create');\n\nvar is = require('./is');\n\nfunction getDefaultName(domain, codomain) {\n  return '{[key: ' + getTypeName(domain) + ']: ' + getTypeName(codomain) + '}';\n}\n\nfunction dict(domain, codomain, name) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(domain), function () {\n      return 'Invalid argument domain ' + assert.stringify(domain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)';\n    });\n    assert(isFunction(codomain), function () {\n      return 'Invalid argument codomain ' + assert.stringify(codomain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to dict(domain, codomain, [name]) combinator (expected a string)';\n    });\n  }\n\n  var displayName = name || getDefaultName(domain, codomain);\n  var domainNameCache = getTypeName(domain);\n  var codomainNameCache = getTypeName(codomain);\n  var identity = isIdentity(domain) && isIdentity(codomain);\n\n  function Dict(value, path) {\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value; // just trust the input if elements must not be hydrated\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isObject(value), function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');\n      });\n    }\n\n    var idempotent = true; // will remain true if I can reutilise the input\n\n    var ret = {}; // make a temporary copy, will be discarded if idempotent remains true\n\n    for (var k in value) {\n      if (value.hasOwnProperty(k)) {\n        k = create(domain, k, process.env.NODE_ENV !== 'production' ? path.concat(domainNameCache) : null);\n        var actual = value[k];\n        var instance = create(codomain, actual, process.env.NODE_ENV !== 'production' ? path.concat(k + ': ' + codomainNameCache) : null);\n        idempotent = idempotent && actual === instance;\n        ret[k] = instance;\n      }\n    }\n\n    if (idempotent) {\n      // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n  }\n\n  Dict.meta = {\n    kind: 'dict',\n    domain: domain,\n    codomain: codomain,\n    name: name,\n    identity: identity\n  };\n  Dict.displayName = displayName;\n\n  Dict.is = function (x) {\n    if (!isObject(x)) {\n      return false;\n    }\n\n    for (var k in x) {\n      if (x.hasOwnProperty(k)) {\n        if (!is(k, domain) || !is(x[k], codomain)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  Dict.update = function (instance, patch) {\n    return Dict(assert.update(instance, patch));\n  };\n\n  return Dict;\n}\n\ndict.getDefaultName = getDefaultName;\nmodule.exports = dict;","map":{"version":3,"sources":["/home/aleksashaz/Aipos/Laba3React-Aipos-/node_modules/tcomb/lib/dict.js"],"names":["assert","require","isTypeName","isFunction","getTypeName","isIdentity","isObject","create","is","getDefaultName","domain","codomain","dict","name","process","env","NODE_ENV","stringify","displayName","domainNameCache","codomainNameCache","identity","Dict","value","path","join","idempotent","ret","k","hasOwnProperty","concat","actual","instance","Object","freeze","meta","kind","x","update","patch","module","exports"],"mappings":"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","sourcesContent":["var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar getTypeName = require('./getTypeName');\nvar isIdentity = require('./isIdentity');\nvar isObject = require('./isObject');\nvar create = require('./create');\nvar is = require('./is');\n\nfunction getDefaultName(domain, codomain) {\n  return '{[key: ' + getTypeName(domain) + ']: ' + getTypeName(codomain) + '}';\n}\n\nfunction dict(domain, codomain, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(domain), function () { return 'Invalid argument domain ' + assert.stringify(domain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)'; });\n    assert(isFunction(codomain), function () { return 'Invalid argument codomain ' + assert.stringify(codomain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to dict(domain, codomain, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || getDefaultName(domain, codomain);\n  var domainNameCache = getTypeName(domain);\n  var codomainNameCache = getTypeName(codomain);\n  var identity = isIdentity(domain) && isIdentity(codomain);\n\n  function Dict(value, path) {\n\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value; // just trust the input if elements must not be hydrated\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isObject(value), function () { return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/'); });\n    }\n\n    var idempotent = true; // will remain true if I can reutilise the input\n    var ret = {}; // make a temporary copy, will be discarded if idempotent remains true\n    for (var k in value) {\n      if (value.hasOwnProperty(k)) {\n        k = create(domain, k, ( process.env.NODE_ENV !== 'production' ? path.concat(domainNameCache) : null ));\n        var actual = value[k];\n        var instance = create(codomain, actual, ( process.env.NODE_ENV !== 'production' ? path.concat(k + ': ' + codomainNameCache) : null ));\n        idempotent = idempotent && ( actual === instance );\n        ret[k] = instance;\n      }\n    }\n\n    if (idempotent) { // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n  }\n\n  Dict.meta = {\n    kind: 'dict',\n    domain: domain,\n    codomain: codomain,\n    name: name,\n    identity: identity\n  };\n\n  Dict.displayName = displayName;\n\n  Dict.is = function (x) {\n    if (!isObject(x)) {\n      return false;\n    }\n    for (var k in x) {\n      if (x.hasOwnProperty(k)) {\n        if (!is(k, domain) || !is(x[k], codomain)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  Dict.update = function (instance, patch) {\n    return Dict(assert.update(instance, patch));\n  };\n\n  return Dict;\n}\n\ndict.getDefaultName = getDefaultName;\nmodule.exports = dict;\n"]},"metadata":{},"sourceType":"script"}